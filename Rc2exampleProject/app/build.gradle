apply plugin: 'com.android.application'

android {
    flavorDimensions "dim"
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.gpxblog.rc2exampleProject"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_FORCE_ARM_BUILD=ON", "-DANDROID_TOOLCHAIN=gcc", "-DANDROID_ARM_NEON=ON", "-DTOP_PATH=" + file("../../").absolutePath
                abiFilters "armeabi-v7a"
                cppFlags.addAll( [
                        "-std=c++11"
                ] )
            }
        }
    }
    productFlavors {
        oculus {
            externalNativeBuild {
                cmake {
                    targets "native-lib"
                    arguments "-DBUILD_OCULUS=ON"
                }
            }
            dimension "dim"
        }
        android {
            externalNativeBuild {
                cmake {
                    targets "native-lib"
                    arguments "-DBUILD_OCULUS=OFF"
                }
            }
            dimension "dim"
        }
    }

    sourceSets {
        main {
            java {
                srcDirs = [ "src/main/java" ]
            }
        }
        android {
            java {
                srcDirs = [ "src/main/javaAndroid" ]
            }
        }
        oculus {
            java {
                srcDirs = [ "src/main/javaOculus" ]
            }
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    packagingOptions {
        pickFirst "lib/armeabi-v7a/foo.so"
        pickFirst "lib/armeabi-v7a/libgnustl_shared.so"
    }
    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a'
            universalApk false
        }
    }
}

dependencies {
    implementation project(path: ':bar')
    implementation project(path: ':bar2')
    implementation project(path: ':foo3')
    implementation project(path: ':bar3')
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('generate')) {
        task.dependsOn(rootProject.getSubprojects().findAll { subproject -> subproject.name == project(":bar").name }.collect { subproject -> "${subproject.getPath()}:build" })
        task.dependsOn(rootProject.getSubprojects().findAll { subproject -> subproject.name == project(":bar2").name }.collect { subproject -> "${subproject.getPath()}:build" })
        task.dependsOn(rootProject.getSubprojects().findAll { subproject -> subproject.name == project(":foo3").name }.collect { subproject -> "${subproject.getPath()}:build" })
        task.dependsOn(rootProject.getSubprojects().findAll { subproject -> subproject.name == project(":bar3").name }.collect { subproject -> "${subproject.getPath()}:build" })
        task.dependsOn(rootProject.getSubprojects().findAll { subproject -> subproject.name == project(":foo2").name }.collect { subproject -> "${subproject.getPath()}:build" })
    }
}